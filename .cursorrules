# Cursor Rules for Mobile App Generator Project

## Code Documentation and Clarity Standards

### 1. Function and Component Documentation
- **ALWAYS** add JSDoc comments for all functions, components, and classes
- Include parameter descriptions, return types, and usage examples
- For React components, document props interface and component purpose

```typescript
/**
 * Creates a new mobile app with specified configuration
 * @param {AppFormData} appData - The app configuration data
 * @param {string} appData.name - The name of the app
 * @param {string} appData.websiteUrl - The website URL to wrap
 * @param {string} appData.packageId - Android package ID
 * @returns {Promise<ApiResponse>} Response containing the created app data
 * @throws {Error} When API call fails
 */
async function createApp(appData: AppFormData): Promise<ApiResponse> {
  // Implementation
}
```

### 2. Component Documentation
- Document component purpose, props, and state management
- Include usage examples in comments
- Document feature flags and configuration options

```typescript
/**
 * AppDetail Component
 * 
 * Displays detailed information about a mobile app including:
 * - Basic information (name, URLs, package IDs)
 * - Feature configuration (Firebase, AppsFlyer)
 * - Build statistics and status
 * 
 * @component
 * @example
 * <AppDetail id="app-123" />
 */
export default function AppDetail() {
  // Component implementation
}
```

### 3. State and Variable Documentation
- Document complex state variables and their purpose
- Explain business logic and data flow
- Document feature toggles and configuration

```typescript
// State for managing app configuration
const [firebaseEnabled, setFirebaseEnabled] = useState(false); // Firebase integration toggle
const [features, setFeatures] = useState<AppFeatures>({
  offlineMode: false,    // Enable offline content caching
  pushNotifications: false, // Enable push notifications
  analytics: true,       // Enable usage analytics
});
```

### 4. API and Service Documentation
- Document all API endpoints and their purposes
- Include error handling patterns
- Document request/response formats

```typescript
/**
 * Mobile App Generator API Service
 * 
 * Handles all communication with the backend API.
 * Provides methods for app creation, builds, and analytics.
 * 
 * @service
 */
class ApiService {
  /**
   * Create a new mobile app
   * @param {AppFormData} data - App configuration
   * @returns {Promise<ApiResponse>} Created app data
   */
  async createApp(data: AppFormData): Promise<ApiResponse> {
    // Implementation
  }
}
```

### 5. File Structure Documentation
- Add file header comments explaining the file's purpose
- Document imports and dependencies
- Document feature requirements

```typescript
/**
 * @fileoverview App Detail page for Mobile App Generator
 * @author YosShor
 * @version 1.0.0
 * @requires react
 * @requires react-query
 * @requires @heroicons/react
 * @requires @/components/ui
 */
```

### 6. Error Handling Documentation
- Document error scenarios and recovery strategies
- Include user-friendly error messages
- Document validation requirements

```typescript
try {
  const app = await createApp(appData);
  showToast('App created successfully!', 'success');
} catch (error) {
  // Handle specific error types
  if (error.response?.status === 409) {
    showToast('An app with this package ID already exists', 'error');
  } else if (error.response?.status === 400) {
    showToast('Please check the required fields', 'error');
  } else {
    showToast('Failed to create app. Please try again.', 'error');
  }
}
```

### 7. Code Organization
- Group related functions and components
- Use clear section comments to organize code
- Follow consistent file structure:
  1. Imports
  2. Types/Interfaces
  3. Helper Functions
  4. Component
  5. Exports

### 8. Naming Conventions
- Use descriptive variable and function names
- Follow camelCase for variables and functions
- Use PascalCase for components and types
- Use UPPER_CASE for constants
- Prefix interfaces with 'I' (e.g., `IAppConfig`)

### 9. UI Component Standards
- Use consistent styling patterns
- Document color schemes and variants
- Include responsive design considerations
- Document accessibility requirements

```typescript
/**
 * Button Component
 * 
 * @component
 * @prop {string} variant - 'primary' | 'secondary' | 'outline'
 * @prop {string} size - 'sm' | 'md' | 'lg'
 * @prop {boolean} isLoading - Show loading spinner
 * @prop {ReactNode} children - Button content
 */
export function Button({ variant, size, isLoading, children }) {
  // Implementation
}
```

### 10. Testing Documentation
- Document test cases and their purposes
- Include setup and teardown instructions
- Document mock data and fixtures
- Document expected behavior

### 11. Performance Considerations
- Document lazy loading strategies
- Include caching considerations
- Document optimization techniques
- Monitor and document build sizes

### 12. Security Documentation
- Document authentication requirements
- Include authorization checks
- Document data validation
- Handle sensitive data appropriately

## When Writing Code:
1. **Always** start with TypeScript interfaces/types
2. **Always** include error handling
3. **Always** add loading states
4. **Always** consider mobile responsiveness
5. **Always** add proper TypeScript types
6. **Always** follow consistent styling patterns

## Code Quality Checklist:
- [ ] TypeScript types defined
- [ ] JSDoc comments added
- [ ] Error handling implemented
- [ ] Loading states added
- [ ] Responsive design considered
- [ ] Accessibility features included
- [ ] Tests written
- [ ] Performance optimized